<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
    
    <!-- spring ioc 설정 -->
    <context:component-scan base-package="bitcamp.java106.pms">
        <context:exclude-filter type="regex" expression="bitcamp.java106.pms.web.*"/>
    </context:component-scan>
    
    <!-- 여기는 MyBatis를 설정하는 문법들 -->
    <bean id="sqlSessionFactory"
          class="org.mybatis.spring.SqlSessionFactoryBean">
      <property name="dataSource" ref="dataSource" />
      <property name="mapperLocations" 
                value="classpath*:bitcamp/java106/pms/sql/*Mapper.xml" />  
      <property name="typeAliasesPackage" 
                value="bitcamp.java106.pms.domain"/>   
    </bean>
    
    <!-- sql 접속 소스 -->
    <bean id="dataSource" 
          class="org.apache.commons.dbcp.BasicDataSource" 
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>
    
    <!-- sql 등록 정보를 위치에서 내용 조회 -->
    <context:property-placeholder 
        location="classpath:jdbc.properties,
                  classpath:aws.properties"/> 
        
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="bitcamp.java106.pms.dao" />
    </bean>
    
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
    <!--  -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="list*" read-only="true"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>
    
    <!-- 
    Spring aop 지정
    - Joinpoint : Advice를 적용 가능한 지점을 의미합니다. 메소드호출, 필드값 변경 등이 Joinpoint에 해당 합니다.
    - Pointcut : Joinpoint의 부분집합으로서 실제로 Advice가 적용되는 Joinpoint를 나타냅니다. 스프링에서는 정규 표현식이나 AspectJ의 문법을 이용하여 Poincut을 재정의 할 수 있습니다.
    - Advice : 언제 공통 관심 기능을 핵심로직에 적용할 지를 정의하고 있습니다. 예를들어, '메서드를 호출 하기전에 트랜잭션 시작' 기능을 적용한다는 것을 정의하고 있는 것입니다.
    - Weaving : Advice를 핵심로직코드에 적용하는것을 weaving이라고 한다라고 합니다. 즉 공통코드를 핵심로직코드에 삽입하는것을 weaving이라고 합니다.
    - Aspect : 여러 객체에 공통으로 적용되는 기능을 Aspect라고 합니다. 트랜잭션이나, 보안등이 Aspect의 좋은 예입니다.
    -->
    <aop:config>
        <aop:advisor advice-ref="txAdvice" 
                     pointcut="execution(* bitcamp.java106.pms.service.impl.*.*(..))"/>
    </aop:config>     
</beans>






